import{i as e,I as a,B as t,g as s,s as r,d as n,c as o,a as c,e as d,H as l,b as u}from"./index-BnnasR0x.js";class i extends t{constructor({callbackSelector:e,cause:a,data:t,extraData:r,sender:n,urls:o}){var c;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(null==(c=a.metaMessages)?void 0:c.length)?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map((e=>"    ".concat(s(e))))],"  Sender: ".concat(n),"  Data: ".concat(t),"  Callback selector: ".concat(e),"  Extra data: ".concat(r)].flat(),name:"OffchainLookupError"})}}class f extends t{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:["Gateway URL: ".concat(s(a)),"Response: ".concat(r(e))],name:"OffchainLookupResponseMalformedError"})}}class p extends t{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:["Contract address: ".concat(a),"OffchainLookup sender address: ".concat(e)],name:"OffchainLookupSenderMismatchError"})}}const h="0x556f1830",y={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function m(t,{blockNumber:s,blockTag:r,data:l,to:u}){const{args:f}=n({data:l,abi:[y]}),[h,m,b,g,k]=f,{ccipRead:x}=t,O=x&&"function"==typeof(null==x?void 0:x.request)?x.request:w;try{if(!function(t,s){if(!e(t,{strict:!1}))throw new a({address:t});if(!e(s,{strict:!1}))throw new a({address:s});return t.toLowerCase()===s.toLowerCase()}(u,h))throw new p({sender:h,to:u});const n=await O({data:b,sender:h,urls:m}),{data:l}=await o(t,{blockNumber:s,blockTag:r,data:c([g,d([{type:"bytes"},{type:"bytes"}],[n,k])]),to:u});return l}catch(L){throw new i({callbackSelector:g,cause:L,data:l,extraData:k,sender:h,urls:m})}}async function w({data:e,sender:a,urls:t}){var s;let n=new Error("An unknown error occurred.");for(let c=0;c<t.length;c++){const d=t[c],i=d.includes("{data}")?"GET":"POST",p="POST"===i?{data:e,sender:a}:void 0,h="POST"===i?{"Content-Type":"application/json"}:{};try{const t=await fetch(d.replace("{sender}",a.toLowerCase()).replace("{data}",e),{body:JSON.stringify(p),headers:h,method:i});let o;if(o=(null==(s=t.headers.get("Content-Type"))?void 0:s.startsWith("application/json"))?(await t.json()).data:await t.text(),!t.ok){n=new l({body:p,details:(null==o?void 0:o.error)?r(o.error):t.statusText,headers:t.headers,status:t.status,url:d});continue}if(!u(o)){n=new f({result:o,url:d});continue}return o}catch(o){n=new l({body:p,details:o.message,url:d})}}throw n}export{w as ccipRequest,m as offchainLookup,y as offchainLookupAbiItem,h as offchainLookupSignature};
